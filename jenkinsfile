    pipeline {
        agent any

        tools {
            maven 'M2_HOME'     // same name as configured in Jenkins
            jdk 'JAVA_HOME'       // same name as configured in Jenkins
        }

        environment {
            GIT_REPO_URL = 'https://github.com/faroukrrr/DevopsPtoject.git'
            SONARQUBE_SERVER = 'sq1'                    // matches Jenkins SonarQube name
            SONARQUBE_TOKEN = credentials('jenkins-sonar')  // your SonarQube token ID
            SONAR_PROJECT_KEY = 'admin'           // name in SonarQube dashboard
        }

        stages {
            stage('Pull from Git') {
                steps {
                    echo 'üì• Cloning project from GitHub...'
                    git branch: 'main', url: "${GIT_REPO_URL}"
                }
            }

            stage('Clean Project') {
                steps {
                    echo 'üßπ Cleaning project...'
                    sh 'mvn clean'
                }
            }

            stage('Compile Project') {
                steps {
                    echo '‚öôÔ∏è Compiling project...'
                    sh 'mvn compile'
                }
            }

            stage('SonarQube Analysis') {
                steps {
                    echo 'üîç Running SonarQube analysis...'
                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh """
                            mvn sonar:sonar \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.host.url=${env.SONAR_HOST_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                        echo "üîó Results available at: ${env.SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
                    }
                }
            }

            stage('Build JAR') {
                steps {
                    echo 'üì¶ Building JAR package...'
                    sh 'mvn package -DskipTests'
                }
            }

            stage('Archive Artifact') {
                steps {
                    echo 'üóÉÔ∏è Archiving JAR artifact...'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        post {
            success {
                echo '‚úÖ CI pipeline completed successfully!'
            }
            failure {
                echo '‚ùå Pipeline failed ‚Äî check logs for errors.'
            }
        }
    }